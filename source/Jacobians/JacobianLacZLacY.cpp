//
//  JacobianLacZLacy.cpp
//  SSM_jana_Xcode
//
//  Created by Lipkova on 14/12/17.
//  Copyright (c) 2017 Lipkova. All rights reserved.
//


#include "JacobianLacZLacY.h"

void computeJacobianLacZLacY(vector<double>& J, vector<double> X, vector<double> k, double t ){
    
   // std::fill (J.begin(),J.end(),0);
    
    J[0] =  t*X[1]*k[0]+1.0;  //(1,1)
    J[1] =  t*X[0]*k[0];  //(1,2)
    J[2] =  -t*k[1];  //(1,3)
    J[3] =  -t*k[3];  //(1,4)
    
    J[23] =  t*X[1]*k[0];  //(2,1)
    J[24] =  t*X[0]*k[0]+1.0;  //(2,2)
    J[25] =  -t*k[1];  //(2,3)
    J[29] =  -t*k[6];  //(2,7)
    
    J[46] =  -t*X[1]*k[0];  //(3,1)
    J[47] =  -t*X[0]*k[0];  //(3,2)
    J[48] =  t*(k[1]+k[2])+1.0;  //(3,3)
    
    J[71] =  -t*k[2];  //(4,3)
    J[72] =  t*k[3]+1.0;  //(4,4)
    
    J[95] =  -t*k[3];  //(5,4)
    J[96] =  t*(k[17]+k[18]+X[9]*k[7])+1.0;  //(5,5)
    J[101] =  t*X[4]*k[7];  //(5,10)
    J[102] =  -t*(k[8]+k[11]);  //(5,11)
    
    J[118] =  -t*k[3];  //(6,4)
    J[120] =  t*k[4]+1.0;  //(6,6)
    
    J[143] =  -t*k[4];  //(7,6)
    J[144] =  t*k[6]+1.0;  //(7,7)
    J[145] =  -t*k[5];  //(7,8)
    
    J[168] =  t*k[5]+1.0;  //(8,8)
    
    J[191] =  -t*k[5];  //(9,8)
    J[192] =  t*X[9]*k[9]+1.0;  //(9,9)
    J[193] =  t*X[8]*k[9];  //(9,10)
    J[195] =  -t*k[10];  //(9,12)
    J[197] =  -t*k[12];  //(9,14)
    
    J[211] =  t*X[9]*k[7];  //(10,5)
    J[215] =  t*X[9]*k[9];  //(10,9)
    J[216] =  t*(X[4]*k[7]+X[8]*k[9])+1.0;  //(10,10)
    J[217] =  -t*k[8];  //(10,11)
    J[218] =  -t*k[10];  //(10,12)
    
    J[234] =  -t*X[9]*k[7];  //(11,5)
    J[239] =  -t*X[4]*k[7];  //(11,10)
    J[240] =  t*(k[8]+k[11])+1.0;  //(11,11)
    
    J[261] =  -t*X[9]*k[9];  //(12,9)
    J[262] =  -t*X[8]*k[9];  //(12,10)
    J[264] =  t*k[10]+1.0;  //(12,12)
    
    J[286] =  -t*k[11];  //(13,11)
    J[288] =  t*(k[13]+k[14])+1.0;  //(13,13)
    
    J[312] =  t*k[12]+1.0;  //(14,14)
    
    J[335] =  -t*k[12];  //(15,14)
    J[336] =  1.0;  //(15,15)
    
    J[357] =  -t*k[13];  //(16,13)
    J[360] =  t*(k[15]+X[20]*k[19])+1.0;  //(16,16)
    J[365] =  t*X[15]*k[19];  //(16,21)
    J[366] =  -t*k[20];  //(16,22)
    
    J[380] =  -t*k[14];  //(17,13)
    J[384] =  t*k[16]+1.0;  //(17,17)
    
    J[406] =  -t*k[15];  //(18,16)
    J[408] =  1.0;  //(18,18)
    
    J[418] =  -t*k[17];  //(19,5)
    J[430] =  -t*k[16];  //(19,17)
    J[432] =  1.0;  //(19,19)
    
    J[441] =  -t*k[18];  //(20,5)
    J[456] =  1.0;  //(20,20)  
    
    J[475] =  t*X[20]*k[19];  //(21,16)  
    J[476] =  -t*k[21];  //(21,17)  
    J[480] =  t*X[15]*k[19]+1.0;  //(21,21)  
    
    J[498] =  -t*X[20]*k[19];  //(22,16)  
    J[503] =  -t*X[15]*k[19];  //(22,21)  
    J[504] =  t*k[20]+1.0;  //(22,22)  
    
    J[527] =  -t*k[20];  //(23,22)  
    J[528] =  1.0;  //(23,23)  
    
    
}